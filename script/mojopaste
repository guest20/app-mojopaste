#!/usr/bin/env perl
use Mojolicious::Lite;

use Mojo::Util qw(encode decode);
use File::Path ();
use Mojo::File 'path';
use Mojo::JSON 'true';
use lib './lib';

plugin 'config' if $ENV{MOJO_CONFIG};

app->defaults(
  layout        => 'mojopaste',
  enable_charts => app->config('enable_charts') // $ENV{PASTE_ENABLE_CHARTS},
  enable_uploads=>  $ENV{PASTE_ENABLE_UPLOADS} // $ENV{PASTE_ENABLE_IMAGES},
  enable_fetching=> $ENV{PASTE_ENABLE_FETCH} || 0,
  embed         => 'description,graph,heading,nav',
  error         => '',
  paste         => '',
  placeholder   => 'Enter your text here or select an image above and then press the "Save" button above.',
  title         => 'Mojopaste',
  source_url    => 'https://metacpan.org/pod/App::mojopaste#DESCRIPTION',
  source_title  => 'Powered by Mojopaste',
);

plugin 'App::mojopaste::Storage' => {
  paste_dir => app->config('paste_dir') || $ENV{PASTE_DIR} || 'paste',
  storage => 'YamlShas',
};

my @image_extensions   = (qw[ png       jpg        gif       tiff ]);
my @allowed_image_types= (qw[ image/png image/jpeg image/gif image/tiff ]);

get '/' =>  sub {
  my $c = shift;
  return unless my $id = $c->param('edit');
  my ($blob) = app->store->fetch_by_id( $id );
  return $c->reply->not_found  unless $blob;
  return $c->param(paste => $blob->raw_content)->render;
  },
  'pastebin';

# put /
post '/' => sub {
  my $c = shift;

  return $c->render(text => 'File is too big.', status => 200)
    if $c->req->is_limit_exceeded;
    # MOJO_MAX_MESSAGE_SIZE=16MB MOJO_MAX_LINE_SIZE=8k MOJO_MAX_BUFFER_SIZE=256k

  # uploads:
  my $up = $c->param('upload');
  if ( app->defaults('enable_uploads') and defined $up and $up->size ) {

      my $blob = app->store->add_from_file($up);
      app->log->info(sprintf "Received %s byte file %s as %s", $blob->size // 0, $blob->path, $blob->id );
      return $c->redirect_to('show', paste_id => $blob->id);
  }

  my $paste = $c->param('paste') || '';

  # downloads:
  if ( $c->param('body_is_url') and $c->stash('enable_fetching') ) {

    my $url = Mojo::URL->new($paste);
    app->log->warn("Fetching '$url' ");
    # TODO: rate limints per domain / client-ip.
    #       log the url some place
    $c->ua->get( $url, sub { my ($ua,$tx) = @_;
        app->store->add_from_string($tx->res->body, { fetched => { from=>$url }}=> sub { my ($blob)=@_;
            $c->redirect_to('show', paste_id => $blob->id);
            return $c->rendered(302);
        });
    });
    return $c->render_later;
    
  }

  return $c->render('pastebin', placeholder => 'You neeed to enter some characters!', status => 400)
    unless $paste =~ /\w/;

  app->store->add_from_string(
    (encode 'UTF-8', $paste), sub { my $blob = shift;
        return $c->redirect_to('show', paste_id => $blob->id);
    });
    return $c->render_later;
  };


get '/:paste_id', sub {
  my $c = shift;
  my $format   = $c->stash('format') || '';
  my $paste_id = $c->stash('paste_id');

  my ($blob) = app->store->fetch_by_id( $paste_id );

  return $c->reply->not_found if not $blob;

  my $info = $blob->image_info;
  if ( app->defaults('enable_uploads') and not $format ) {
      return $c->render(
        'show_image',
          src   => $paste_id .'.'. $info->{file_ext},
          height=> $info->{height},
          width => $info->{width},
        ) if not exists $info->{error}
  }

  return $c->render(json => $info) 
    if not exists $info->{error} and grep $_ eq $format, qw[txt json];

  if (app->defaults('enable_uploads') and grep $format eq $_, @image_extensions) {

      if ( exists $info->{error} ) {
          # if it's not an image, bail out
          app->log->info("Attempt to load", $paste_id, " as .", $format, ":", $info->{error});
          return $c->render(
            text => "Error parsing this paste as an image: ". $info->{error}, 
            format=> 'text',
            status => 500);
      } 

      my $content_disposition = 'inline' || 'attachment';
      my $status              = 200;

      my $content_type = $info->{file_media_type}; 
      unless (grep $content_type eq $_, @allowed_image_types){
          app->log->info( "Refusing to serve", $paste_id, " as ", $content_type );
          $c->render(
            text => "Nope, not serving a $content_type", 
            format=> 'text',
            status => 500 );
      }

      # just like Mojolicious::Plugin::RenderFile
      my $headers = Mojo::Headers->new();
         $headers->add( 'Content-Type', $content_type . ';name=' . $paste_id );
         $headers->add( 'Content-Disposition', $content_disposition . ';filename=' . $paste_id ); # possibly reflected download

      my $asset = Mojo::Asset::File->new( path => $blob->blob_path);
         $headers->add( 'Content-Length' => $asset->size );

        $c->res->content->headers($headers);     
        $c->res->content->asset($asset);

        return $c->rendered($status);
  }

  if ($c->param('raw') or $format eq 'txt') {
    $c->res->headers->content_type('text/plain; charset=utf-8');
    return $c->render(text => decode 'UTF-8', $blob->blob_path->slurp);
  }

  $c->res->headers->header('X-Plain-Text-URL' => $c->url_for(format => 'txt')->userinfo(undef)->to_abs);
  $c->stash(embed => $c->param('embed')) if $c->param('embed');
  $c->render(paste =>  decode 'UTF-8',$blob->blob_path->slurp);

}, 'show';

get '/:paste_id/chart' => sub {
  my $c = shift;
  my $chart = {element => 'chart', data => [], hideHover => true, resize => true};
  my ($heading, $description, $error) = ('', '', '');

  my ($blob) = app->store->fetch_by_id( $c->stash('paste_id') );
  return $c->reply->not_found if not $blob;

    my $paste = $blob->raw_content;
    while ($paste =~ s!^\s*(?://|\#)(.*)!!m) {
        $description .= $1 if $heading;
        $heading ||= $1;
    }

    eval {
      _chart($chart, grep { $_ =~ /\S/ } split /\r?\n/, $paste);
    } or do {
      $error = $@ || 'Unknown error';
      $error =~ s!\s*at .*? line \d+.*!!s;
    };

    $c->stash(embed => $c->param('embed')) if $c->param('embed');
    $c->render(chart => $chart, description => $description // '', error => $error, heading => $heading);

  }, 'chart' if app->defaults('enable_charts');

app->start;

sub _chart {
  eval 'require Text::CSV;1' or die 'Run "cpanm Text::CSV" to install missing dependency.';

  my $chart = shift;
  my $csv   = Text::CSV->new;

  $csv->parse(shift @_);    # heading
  $chart->{ykeys}  = [$csv->fields];
  $chart->{xkey}   = shift @{$chart->{ykeys}};
  $chart->{labels} = $chart->{ykeys};

  while (@_) {
    die $csv->error_input unless $csv->parse(shift @_);
    my @row = $csv->fields or next;
    push @{$chart->{data}}, {$chart->{xkey} => shift(@row), map { ($_ => 0 + shift @row) } @{$chart->{ykeys}}};
  }

  die 'Could not parse CSV data.' unless @{$chart->{data}};
  return $chart;
}

__DATA__
@@ css/mojopaste.css
  html, body, form, text { padding: 0; margin: 0; }
  body.has-nav { margin-top: 38px; }
  body, textarea { background: #f8f8f8; }
  body, textarea, a, .btn { color: #555; font-size: 16px; font-family: 'Helvetica Neue', Helvetica, sans-serif; }
  h2 { font-size: 1.5em; }
  h2, p { margin: 20px; }
  body.has-nav h2 { padding-top: 20px; }
  nav, .btn { background: #e6e6e6; border: 0 solid #ddd }
  nav { border-bottom-width: 1px; padding: 0 10px; overflow: hidden; position: fixed; top: 0; left: 0; right: 0; z-index: 100; }
  textarea, pre, .prettyprint { font-family:Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Consolas,monospace; border:0!important, box-sizing: border-box; margin: 0; }
  body.has-nav textarea, body.has-nav pre { padding: 20px; }
  textarea { width: 100%; height: 100%; border: 0; outline-offset: 0; outline: 0; display: block; }
  pre { margin-bottom: 60px; }
  .top { background: #ddd; font-size: 14px; line-height: 1.5; text-decoration: none; text-align: center; padding: 7px 12px; margin-right: 3px; vertical-align: middle; display: block; float: left; cursor: pointer; }
  .btn { background: #ddd; font-size: 14px; line-height: 1.5; text-decoration: none; text-align: center; padding: 7px 12px; margin-right: 3px; vertical-align: middle; display: block; float: left; cursor: pointer; }
  .btn:hover { background: #d0d0d0; }
  .btn:focus { background: #ccc; outline: 0; }
  .powered-by { float: right; display: block; }

@@ css/prettify-theme.css
  /*! Color themes for Google Code Prettify | MIT License | github.com/jmblog/color-themes-for-google-code-prettify */
  .pln{color:#555}ol.linenums{margin-top:0;margin-bottom:0;color:#ccc}li.L0,li.L1,li.L2,li.L3,li.L4,li.L5,li.L6,li.L7,li.L8,li.L9{padding-left:1em;list-style-type:decimal}
  @media screen{.str{color:#183691}.kwd{color:#a71d5d}.com{color:#969896}.typ{color:#0086b3}.lit{color:#0086b3}.pun{color:#333}.opn{color:#333}.clo{color:#333}.tag{color:navy}.atn{color:#795da3}.atv{color:#183691}.dec{color:#333}.var{color:teal}.fun{color:#900}}


@@ layouts/mojopaste.html.ep
<!DOCTYPE>
<html>
<head>
  <title><%= title %></title>
  <meta name="description" content="A Mojolicious powered pastebin">
  <meta name="viewport" content="width=device-width, initial-scale=0.9" />

  %= stylesheet '//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css' if stash 'chart';
  %= stylesheet '/css/prettify-theme.css'
  %= stylesheet '/css/mojopaste.css'
  %= javascript begin
  window.onkeydown = function(e) {
    var el;
    if (!e.ctrlKey && !e.metaKey) return; // ctrl or cmd
    if (e.keyCode != 65 && e.keyCode != 97) return; // A or a
    if (el = document.querySelector(".prettyprint")) {
      var range = document.createRange();
      range.selectNodeContents(el);
      var selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range);
      e.preventDefault();
    }
    else if(el = document.querySelector("textarea")) {
      el.select();
      e.preventDefault();
    }
  };
  window.onload = function(e) {
    var form = document.querySelector('form');
    var pre = document.querySelector('pre');

    if (form) {
      document.querySelector('textarea').focus();
      document.querySelector('.save.btn').onclick = function(e) {
            form.action = '<%= url_for 'pastebin' %>' };
    }
    if (pre && pre.firstChild.nodeValue.length < 50000) {
      prettyPrint();
    }
  };
  % end

<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>

</head>

<body class="<%= $embed =~ /nav/ ? 'has-nav' : '' %>">
% if ($embed =~ /nav/) { # New,Edit,Raw,Graph  ; Chart: New,Edit,Data
<nav>
  %= link_to 'New', 'pastebin',                                                class => 'btn'
  % if(my $paste_id = stash 'paste_id') {
  %= link_to 'Edit',  url_for('pastebin')->query(edit => $paste_id),           class => 'btn'
  % if (stash 'chart') { 
  %= link_to 'Data',  url_for('show', paste_id => $paste_id ),                 class => 'btn'
  % } else { # It'd be nice to not offer a chart for an image:
  %= link_to 'Graph', url_for('chart'),                                        class => 'btn' if $enable_charts
  % }
  %= link_to 'Raw',   url_for('show', paste_id => $paste_id, format => 'txt'), class => 'btn'
  % }

  %= include 'powered_by'
</nav>
% }
  %= content
</body>
</html>
@@ layouts/mojopaste.txt.ep
%= content
@@ pastebin.html.ep
%= form_for 'invalid', method => 'post', (enctype => 'multipart/form-data') => begin
<nav>
  <button class="save btn" tabindex="2">Save</button>
% if ($enable_uploads) {
  <input  class="save btn" type=file name=upload>
% }
% if ($enable_fetching) {
  <div class=top><label><input type=checkbox name=body_is_url>Fetch content from url:</label></div>
% }
  %= include 'powered_by'
</nav>
%= text_area 'paste', placeholder => $placeholder, tabindex => 1
% end
@@ chart.html.ep
% if ($heading and $embed =~ /heading/) {
<h2><%= $heading %></h2>
% }
% if ($description and $embed =~ /description/) {
<p><%= $description %></p>
% }
% if ($embed =~ /graph/) {
<div id="chart"><%= $error %></div>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
  % unless ($error) {
<script>
try {
  var chart = document.getElementById('chart');
  var tid, resize = function() { chart.style.height = (window.innerHeight - chart.offsetTop) + 'px' };
  resize();
  window.onresize = function() { if (tid) clearTimeout(tid); var tid = setTimeout(resize, 10); }
  new Morris.Line(<%== Mojo::JSON::encode_json(stash 'chart') %>);
} catch(e) {
  document.getElementById('chart').innerHTML = 'Invalid chart data. ' + e;
}
</script>
  % }
% }
@@ show.html.ep
<pre class="prettyprint linenums"><%= $error || $paste %></pre>
@@ show_image.html.ep
<img src="<%= $src %>" height="<%= $height %>" width="<%= $width %>">
@@ powered_by.html.ep
<a class="btn powered-by" href="<%= $source_url %>" title="Get mojopaste"><%= $source_title %></a>
@@ show.txt.ep
Paste not found: <%= $paste_id %>
@@ not_found.html.ep
<b>Not Found.</b>
@@ not_found.txt.ep
Not found.
